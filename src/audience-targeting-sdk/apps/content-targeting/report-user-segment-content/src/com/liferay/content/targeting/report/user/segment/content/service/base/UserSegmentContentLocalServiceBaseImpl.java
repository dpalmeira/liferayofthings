/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.report.user.segment.content.service.base;

import com.liferay.content.targeting.report.user.segment.content.model.UserSegmentContent;
import com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalService;
import com.liferay.content.targeting.report.user.segment.content.service.persistence.UserSegmentContentPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user segment content local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.content.targeting.report.user.segment.content.service.impl.UserSegmentContentLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.content.targeting.report.user.segment.content.service.impl.UserSegmentContentLocalServiceImpl
 * @see com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalServiceUtil
 * @generated
 */
public abstract class UserSegmentContentLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements UserSegmentContentLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalServiceUtil} to access the user segment content local service.
	 */

	/**
	 * Adds the user segment content to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userSegmentContent the user segment content
	 * @return the user segment content that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserSegmentContent addUserSegmentContent(
		UserSegmentContent userSegmentContent) throws SystemException {
		userSegmentContent.setNew(true);

		return userSegmentContentPersistence.update(userSegmentContent);
	}

	/**
	 * Creates a new user segment content with the primary key. Does not add the user segment content to the database.
	 *
	 * @param userSegmentContentId the primary key for the new user segment content
	 * @return the new user segment content
	 */
	@Override
	public UserSegmentContent createUserSegmentContent(
		long userSegmentContentId) {
		return userSegmentContentPersistence.create(userSegmentContentId);
	}

	/**
	 * Deletes the user segment content with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userSegmentContentId the primary key of the user segment content
	 * @return the user segment content that was removed
	 * @throws PortalException if a user segment content with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserSegmentContent deleteUserSegmentContent(
		long userSegmentContentId) throws PortalException, SystemException {
		return userSegmentContentPersistence.remove(userSegmentContentId);
	}

	/**
	 * Deletes the user segment content from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userSegmentContent the user segment content
	 * @return the user segment content that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserSegmentContent deleteUserSegmentContent(
		UserSegmentContent userSegmentContent) throws SystemException {
		return userSegmentContentPersistence.remove(userSegmentContent);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserSegmentContent.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return userSegmentContentPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.content.targeting.report.user.segment.content.model.impl.UserSegmentContentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return userSegmentContentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.content.targeting.report.user.segment.content.model.impl.UserSegmentContentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return userSegmentContentPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return userSegmentContentPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return userSegmentContentPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserSegmentContent fetchUserSegmentContent(long userSegmentContentId)
		throws SystemException {
		return userSegmentContentPersistence.fetchByPrimaryKey(userSegmentContentId);
	}

	/**
	 * Returns the user segment content with the primary key.
	 *
	 * @param userSegmentContentId the primary key of the user segment content
	 * @return the user segment content
	 * @throws PortalException if a user segment content with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public UserSegmentContent getUserSegmentContent(long userSegmentContentId)
		throws PortalException, SystemException {
		return userSegmentContentPersistence.findByPrimaryKey(userSegmentContentId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return userSegmentContentPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user segment contents.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.content.targeting.report.user.segment.content.model.impl.UserSegmentContentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user segment contents
	 * @param end the upper bound of the range of user segment contents (not inclusive)
	 * @return the range of user segment contents
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<UserSegmentContent> getUserSegmentContents(int start, int end)
		throws SystemException {
		return userSegmentContentPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user segment contents.
	 *
	 * @return the number of user segment contents
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getUserSegmentContentsCount() throws SystemException {
		return userSegmentContentPersistence.countAll();
	}

	/**
	 * Updates the user segment content in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userSegmentContent the user segment content
	 * @return the user segment content that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserSegmentContent updateUserSegmentContent(
		UserSegmentContent userSegmentContent) throws SystemException {
		return userSegmentContentPersistence.update(userSegmentContent);
	}

	/**
	 * Returns the user segment content local service.
	 *
	 * @return the user segment content local service
	 */
	public com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalService getUserSegmentContentLocalService() {
		return userSegmentContentLocalService;
	}

	/**
	 * Sets the user segment content local service.
	 *
	 * @param userSegmentContentLocalService the user segment content local service
	 */
	public void setUserSegmentContentLocalService(
		com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalService userSegmentContentLocalService) {
		this.userSegmentContentLocalService = userSegmentContentLocalService;
	}

	/**
	 * Returns the user segment content remote service.
	 *
	 * @return the user segment content remote service
	 */
	public com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentService getUserSegmentContentService() {
		return userSegmentContentService;
	}

	/**
	 * Sets the user segment content remote service.
	 *
	 * @param userSegmentContentService the user segment content remote service
	 */
	public void setUserSegmentContentService(
		com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentService userSegmentContentService) {
		this.userSegmentContentService = userSegmentContentService;
	}

	/**
	 * Returns the user segment content persistence.
	 *
	 * @return the user segment content persistence
	 */
	public UserSegmentContentPersistence getUserSegmentContentPersistence() {
		return userSegmentContentPersistence;
	}

	/**
	 * Sets the user segment content persistence.
	 *
	 * @param userSegmentContentPersistence the user segment content persistence
	 */
	public void setUserSegmentContentPersistence(
		UserSegmentContentPersistence userSegmentContentPersistence) {
		this.userSegmentContentPersistence = userSegmentContentPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.content.targeting.report.user.segment.content.model.UserSegmentContent",
			userSegmentContentLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.content.targeting.report.user.segment.content.model.UserSegmentContent");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return UserSegmentContent.class;
	}

	protected String getModelClassName() {
		return UserSegmentContent.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = userSegmentContentPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalService.class)
	protected com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentLocalService userSegmentContentLocalService;
	@BeanReference(type = com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentService.class)
	protected com.liferay.content.targeting.report.user.segment.content.service.UserSegmentContentService userSegmentContentService;
	@BeanReference(type = UserSegmentContentPersistence.class)
	protected UserSegmentContentPersistence userSegmentContentPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private UserSegmentContentLocalServiceClpInvoker _clpInvoker = new UserSegmentContentLocalServiceClpInvoker();
}