package com.lrexperts.liferay.liferayofthings.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.lrexperts.liferay.liferayofthings.model.SensorValue;
import com.lrexperts.liferay.liferayofthings.model.SensorValueModel;
import com.lrexperts.liferay.liferayofthings.model.SensorValueSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SensorValue service. Represents a row in the &quot;LRoT_SensorValue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lrexperts.liferay.liferayofthings.model.SensorValueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SensorValueImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SensorValueImpl
 * @see com.lrexperts.liferay.liferayofthings.model.SensorValue
 * @see com.lrexperts.liferay.liferayofthings.model.SensorValueModel
 * @generated
 */
@JSON(strict = true)
public class SensorValueModelImpl extends BaseModelImpl<SensorValue>
    implements SensorValueModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a sensor value model instance should use the {@link com.lrexperts.liferay.liferayofthings.model.SensorValue} interface instead.
     */
    public static final String TABLE_NAME = "LRoT_SensorValue";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "sensorValueId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "sensorId", Types.BIGINT },
            { "value", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table LRoT_SensorValue (uuid_ VARCHAR(75) null,sensorValueId LONG not null primary key,companyId LONG,groupId LONG,sensorId LONG,value VARCHAR(75) null,createDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table LRoT_SensorValue";
    public static final String ORDER_BY_JPQL = " ORDER BY sensorValue.createDate ASC";
    public static final String ORDER_BY_SQL = " ORDER BY LRoT_SensorValue.createDate ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.lrexperts.liferay.liferayofthings.model.SensorValue"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.lrexperts.liferay.liferayofthings.model.SensorValue"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.lrexperts.liferay.liferayofthings.model.SensorValue"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long CREATEDATE_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long SENSORID_COLUMN_BITMASK = 8L;
    public static long UUID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.lrexperts.liferay.liferayofthings.model.SensorValue"));
    private static ClassLoader _classLoader = SensorValue.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SensorValue.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _sensorValueId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _sensorId;
    private long _originalSensorId;
    private boolean _setOriginalSensorId;
    private String _value;
    private Date _createDate;
    private Date _originalCreateDate;
    private long _columnBitmask;
    private SensorValue _escapedModel;

    public SensorValueModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SensorValue toModel(SensorValueSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SensorValue model = new SensorValueImpl();

        model.setUuid(soapModel.getUuid());
        model.setSensorValueId(soapModel.getSensorValueId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setGroupId(soapModel.getGroupId());
        model.setSensorId(soapModel.getSensorId());
        model.setValue(soapModel.getValue());
        model.setCreateDate(soapModel.getCreateDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SensorValue> toModels(SensorValueSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SensorValue> models = new ArrayList<SensorValue>(soapModels.length);

        for (SensorValueSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _sensorValueId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setSensorValueId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _sensorValueId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SensorValue.class;
    }

    @Override
    public String getModelClassName() {
        return SensorValue.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("sensorValueId", getSensorValueId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("sensorId", getSensorId());
        attributes.put("value", getValue());
        attributes.put("createDate", getCreateDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long sensorValueId = (Long) attributes.get("sensorValueId");

        if (sensorValueId != null) {
            setSensorValueId(sensorValueId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long sensorId = (Long) attributes.get("sensorId");

        if (sensorId != null) {
            setSensorId(sensorId);
        }

        String value = (String) attributes.get("value");

        if (value != null) {
            setValue(value);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getSensorValueId() {
        return _sensorValueId;
    }

    @Override
    public void setSensorValueId(long sensorValueId) {
        _sensorValueId = sensorValueId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getSensorId() {
        return _sensorId;
    }

    @Override
    public void setSensorId(long sensorId) {
        _columnBitmask |= SENSORID_COLUMN_BITMASK;

        if (!_setOriginalSensorId) {
            _setOriginalSensorId = true;

            _originalSensorId = _sensorId;
        }

        _sensorId = sensorId;
    }

    public long getOriginalSensorId() {
        return _originalSensorId;
    }

    @JSON
    @Override
    public String getValue() {
        if (_value == null) {
            return StringPool.BLANK;
        } else {
            return _value;
        }
    }

    @Override
    public void setValue(String value) {
        _value = value;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _columnBitmask = -1L;

        if (_originalCreateDate == null) {
            _originalCreateDate = _createDate;
        }

        _createDate = createDate;
    }

    public Date getOriginalCreateDate() {
        return _originalCreateDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            SensorValue.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SensorValue toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SensorValue) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SensorValueImpl sensorValueImpl = new SensorValueImpl();

        sensorValueImpl.setUuid(getUuid());
        sensorValueImpl.setSensorValueId(getSensorValueId());
        sensorValueImpl.setCompanyId(getCompanyId());
        sensorValueImpl.setGroupId(getGroupId());
        sensorValueImpl.setSensorId(getSensorId());
        sensorValueImpl.setValue(getValue());
        sensorValueImpl.setCreateDate(getCreateDate());

        sensorValueImpl.resetOriginalValues();

        return sensorValueImpl;
    }

    @Override
    public int compareTo(SensorValue sensorValue) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), sensorValue.getCreateDate());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SensorValue)) {
            return false;
        }

        SensorValue sensorValue = (SensorValue) obj;

        long primaryKey = sensorValue.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        SensorValueModelImpl sensorValueModelImpl = this;

        sensorValueModelImpl._originalUuid = sensorValueModelImpl._uuid;

        sensorValueModelImpl._originalCompanyId = sensorValueModelImpl._companyId;

        sensorValueModelImpl._setOriginalCompanyId = false;

        sensorValueModelImpl._originalGroupId = sensorValueModelImpl._groupId;

        sensorValueModelImpl._setOriginalGroupId = false;

        sensorValueModelImpl._originalSensorId = sensorValueModelImpl._sensorId;

        sensorValueModelImpl._setOriginalSensorId = false;

        sensorValueModelImpl._originalCreateDate = sensorValueModelImpl._createDate;

        sensorValueModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<SensorValue> toCacheModel() {
        SensorValueCacheModel sensorValueCacheModel = new SensorValueCacheModel();

        sensorValueCacheModel.uuid = getUuid();

        String uuid = sensorValueCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            sensorValueCacheModel.uuid = null;
        }

        sensorValueCacheModel.sensorValueId = getSensorValueId();

        sensorValueCacheModel.companyId = getCompanyId();

        sensorValueCacheModel.groupId = getGroupId();

        sensorValueCacheModel.sensorId = getSensorId();

        sensorValueCacheModel.value = getValue();

        String value = sensorValueCacheModel.value;

        if ((value != null) && (value.length() == 0)) {
            sensorValueCacheModel.value = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            sensorValueCacheModel.createDate = createDate.getTime();
        } else {
            sensorValueCacheModel.createDate = Long.MIN_VALUE;
        }

        return sensorValueCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", sensorValueId=");
        sb.append(getSensorValueId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", sensorId=");
        sb.append(getSensorId());
        sb.append(", value=");
        sb.append(getValue());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.lrexperts.liferay.liferayofthings.model.SensorValue");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sensorValueId</column-name><column-value><![CDATA[");
        sb.append(getSensorValueId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sensorId</column-name><column-value><![CDATA[");
        sb.append(getSensorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>value</column-name><column-value><![CDATA[");
        sb.append(getValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
